{
    "docs": [
        {
            "location": "/", 
            "text": "siddhi-execution-extrema\n\n\nAPI Docs:\n\n\n\n\n4.0.1-SNAPSHOT", 
            "title": "Welcome to WSO2 Siddhi EXECUTION EXTREMA"
        }, 
        {
            "location": "/#siddhi-execution-extrema", 
            "text": "", 
            "title": "siddhi-execution-extrema"
        }, 
        {
            "location": "/#api-docs", 
            "text": "4.0.1-SNAPSHOT", 
            "title": "API Docs:"
        }, 
        {
            "location": "/about/license/", 
            "text": "Copyright (c) 2017 WSO2 Inc. (\nhttp://www.wso2.org\n) All Rights Reserved.\n\n\nWSO2 Inc. licenses this file to you under the Apache License,\nVersion 2.0 (the \"License\"); you may not use this file except\nin compliance with the License.\nYou may obtain a copy of the License at\n\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\n\nUnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\n\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, either express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.\n\n\n-------------------------------------------------------------------------\n                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \nLicense\n shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \nLicensor\n shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \nLegal Entity\n shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \ncontrol\n means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \nYou\n (or \nYour\n) shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \nSource\n form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \nObject\n form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \nWork\n shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \nDerivative Works\n shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \nContribution\n shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \nsubmitted\n\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \nNot a Contribution.\n\n\n   \nContributor\n shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \nNOTICE\n text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \nAS IS\n BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS", 
            "title": "License"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/", 
            "text": "Extrema\n\n\nminbytimebatch \n(Window)\n\n\nCalculates the minimum value of a specified attribute within a time window, and emits it.\n\n\n\nSyntax\n\n\nminbytimebatch(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n time.batch.length)\n\n\n\n\nQuery Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.batch.length\n\n        \nThe length of the time window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\n\nExamples\n\n\nExample 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:minByTimeBatch(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\nIn the given example query, a time-batch window of 1 second is considered. After every second, the window will be reset, emitting the event with the minimum price.\n\n\n\nmaxbytimebatch \n(Window)\n\n\nCalculates the maximum value of a specified attribute within a time window, and emits it.\n\n\n\nSyntax\n\n\nmaxbytimebatch(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n time.batch.length)\n\n\n\n\nQuery Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.batch.length\n\n        \nThe length of the time window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\n\nExamples\n\n\nExample 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByTimeBatch(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\nIn the given example query, a time-batch window of 1 second is considered. After every second, the window will be reset, emitting the event with the maximum price.\n\n\n\nmaxByLengthBatch \n(Window)\n\n\nCalculates the maximum value of a specified attribute inside a batch window and emits it.\n\n\n\nSyntax\n\n\nmaxByLengthBatch(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT\n batch.length)\n\n\n\n\nQuery Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbatch.length\n\n        \nThe length of the batch involved.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\n\nExamples\n\n\nExample 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:maxByLengthBatch(price, 4) \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\nIn the given example query, a batch of 4 events will be collected. Once the window is full, the item with the maximum price in the batch will be emitted out and the window will be reset.\n\n\n\nminByLengthBatch \n(Window)\n\n\nCalculates the minimum value of a specified attribute inside a batch window and emits it.\n\n\n\nSyntax\n\n\nminByLengthBatch(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT\n batch.length)\n\n\n\n\nQuery Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbatch.length\n\n        \nThe length of the batch involved.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\n\nExamples\n\n\nExample 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:minByLengthBatch(price, 4) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\nIn the given example query, a batch of 4 events will be collected. Once the window is full, the item with the minimum price in the batch will be emitted out and the window will be reset.\n\n\n\nmaxbytime \n(Window)\n\n\nCalculates the maximum value of a specified attribute within a sliding time window and emits it. The output is updated for every event arrival and expiry during the time.window.length specified.\n\n\n\nSyntax\n\n\nmaxbytime(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n time.window.length)\n\n\n\n\nQuery Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.window.length\n\n        \nThe length of the sliding time window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\n\nExamples\n\n\nExample 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByTime(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\nIn the given example query, a sliding time window of 1 second is considered. This output is updated for every event arrival and expiry of every event (after 1 second of its arrival).\n\n\n\nminbytime \n(Window)\n\n\nCalculates the minimum value of a specified attribute within a sliding time window and emits it. The output is updated for every event arrival and expiry during the time.window.length specified.\n\n\n\nSyntax\n\n\nminbytime(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n time.window.length)\n\n\n\n\nQuery Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.window.length\n\n        \nThe length of the sliding time window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\n\nExamples\n\n\nExample 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:minByTime(price, 1 sec) select symbol,price,volume\ninsert into outputStream;\n\n\n\n\nIn the given example query, a sliding time window of 1 second is considered. This output is updated for every event arrival and expiry of every event (after 1 second of its arrival).\n\n\n\nminByLength \n(Window)\n\n\nThe event with the minimum value for the given attribute in the specified sliding window is emitted.\n\n\n\nSyntax\n\n\nminByLength(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n sliding.window.length)\n\n\n\n\nQuery Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nsliding.window.length\n\n        \nThe length of the sliding window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\n\nExamples\n\n\nExample 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:minByLength(price, 4) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\nIn the given example query, a sliding window of length 4 is considered. The event with the minimum price will be emitted out.\n\n\n\nmaxByLength \n(Window)\n\n\nThe event with the maximum value for the given attribute in the specified sliding window is emitted.\n\n\n\nSyntax\n\n\nmaxByLength(\nINT|FLOAT|DOUBLE|LONG|STRING\n attribute, \nINT|LONG\n sliding.window.length)\n\n\n\n\nQuery Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nsliding.window.length\n\n        \nThe length of the sliding window observed.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\n\nExamples\n\n\nExample 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByLength(price, 4) select symbol,price,volume\ninsert into outputStream ;\n\n\n\n\nIn the given example query, a sliding window of length 4 is considered. The event with the maximum price will be emitted out.\n\n\n\nminMax \n(Stream Processor)\n\n\nminMax finds the minimum and/or the maximum value within a given length window (maxPreBound+maxPostBound), where following conditions are met. \nFor minimum: \nAn event where the value for the specified attribute is greater by the percentage specified as the preBoundChange should have arrived prior to the event with the minimum value, within the maxPreBound length window.\nAn event where the value for the specified attribute is greater by the percentage specified as the postBoundChange should have arrived after the event with the minimum value, within the maxPostBound length window.\nFor maximum: \nAn event where the value for the specified attribute is less by the percentage specified as the preBoundChange should have arrived prior to the event with the maximum value, within the maxPreBound length window.\nAn event where the value for the specified attribute is less by the percentage specified as the postBoundChange should have arrived after the event with the maximum value, within the maxPostBound length window.\nReturns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as min or max as relevant. These events are returned with the following additional parameters.\npreBound: The actual distance between the minimum/maximum value and the threshold value. This value should be within the MaxPreBound window.\npostBound: The actual distance between the minimum/maximum value and the threshold value. This value should be within the MaxPostBound window.\n\n\n\nSyntax\n\n\nminMax(\nINT|FLOAT|DOUBLE|LONG\n attribute, \nINT\n max.pre.bound, \nINT\n max.post.bound, \nDOUBLE\n pre.bound.change, \nDOUBLE\n post.bound.change, \nSTRING\n extrema.type)\n\n\n\n\nQuery Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum and/or maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmax.pre.bound\n\n        \nThe maximum pre window length to be considered (before the min/max event).\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmax.post.bound\n\n        \nThe maximum post window length to be considered (after the min/max event).\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npre.bound.change\n\n        \nThe threshold, pre-bound change percentage.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npost.bound.change\n\n        \nThe threshold, post-bound change percentage.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nextrema.type\n\n        \nThis can be min, max or minmax.\nmin: If this is specified, minimum values are identified within the given window length, and they are returned with min as their extrema type.\nmax: If this is specified, maximum values are identified within the given window length, and they are returned with max as their extrema type.\nminmax: If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as min for the minimum events, and as max for the maximum events.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\n\nExamples\n\n\nExample 1\n\n\nfrom inputStream#extrema:minMax(price, 4, 4, 1, 2, 'max')\nselect *\ninsert into outputStream; \n\n\n\n\nReturns the maximum values found within a set of price values.\n\n\n\nExample 2\n\n\nfrom inputStream#extrema:minMax(price, 4, 4, 1, 2, 'min')\nselect *\ninsert into outputStream; \n\n\n\n\nreturns the minimum values found within a set of price values.\n\n\n\nExample 3\n\n\nfrom inputStream#extrema:minMax(price, 4, 4, 1, 2, 'minmax')\nselect *\ninsert into outputStream; \n\n\n\n\nReturns both the minimum values and the maximum values found within a set of price values.\n\n\n\nkernelMinMax \n(Stream Processor)\n\n\nkernalMinMax uses Gaussian Kernel to smooth the time series values in the given window size, and then determine the maxima and minima of that set of values. Returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as min or max as relevant.\n\n\n\nSyntax\n\n\nkernelMinMax(\nINT|FLOAT|DOUBLE|LONG\n attribute, \nDOUBLE\n bandwidth, \nINT\n window.size, \nSTRING\n extrema.type)\n\n\n\n\nQuery Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum and/or maximum value is required.\n\n        \n\n        \nINT\nFLOAT\nDOUBLE\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbandwidth\n\n        \nThe bandwidth of the Gaussian Kernel calculation.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.size\n\n        \nThe length of the window within which the minimum and/or the maximum value for the given window should be identified.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nextrema.type\n\n        \nThis can be min, max or minmax.min: If this is specified, minimum values are identified within the given window length, and they are returned with min as their extrema type. max: If this is specified, maximum values are identified within the given window length, and they are returned with max as their extrema type. minmax: If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as min for the minimum events, and as max for the maximum events.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\n\nExamples\n\n\nExample 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:kernelMinMax(price, 3, 7, \u2018max\u2019)\nselect *\ninsert into outputStream;\n\n\n\n\nThis query returns the maximum values for a set of price values.\n\n\n\ntopK \n(Stream Processor)\n\n\ntopK counts the frequency of different values of a specified attribute, and emits the highest (k) number of frequency values.\n\n\n\nSyntax\n\n\ntopK(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT\n k.value)\n\n\n\n\nQuery Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of top frequencies required.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\n\nExamples\n\n\nExample 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:topK(item, 3)\ninsert all events into outputStream;)\n\n\n\n\nIn the given example query, the three items with the highest frequency counts will be emitted\n\n\n\nbottomK \n(Stream Processor)\n\n\nbottomK counts the frequency of different values of a specified attribute, and emits the lowest (k) number of frequency values. Events are emitted only if there is a change in the bottomK results for each received chunk of events.\n\n\n\nSyntax\n\n\nbottomK(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT\n k.value)\n\n\n\n\nQuery Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of bottom frequencies required.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\n\nExamples\n\n\nExample 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:bottomK(item, 3)\ninsert all events into outputStream;)\n\n\n\n\nIn the given example query, the three items with the lowest frequency counts will be emitted\n\n\n\nbottomKTimeBatch \n(Stream Processor)\n\n\nbottomKTimeBatch counts the frequency of different values of a specified attribute inside a time window, and emits the lowest (k) number of frequency values. Events are emitted only if there is a change in the bottomK results for each received chunk of events.\n\n\n\nSyntax\n\n\nbottomKTimeBatch(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT|LONG\n time.window, \nINT\n k.value)\n\n\n\n\nQuery Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.window\n\n        \nThe time window during which the frequency should be calculated.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of bottom frequencies required.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\n\nExamples\n\n\nExample 1\n\n\ndefine stream inputStream (item string, price long);\nfrom inputStream#extrema:bottomKTimeBatch(item, 1 sec,  3)\ninsert all events into outputStream;)\n\n\n\n\nIn the given example query, a batch of 1 second will be collected. Once the window is full, the 3 items with the lowest frequency will be emitted out and the window will be reset.\n\n\n\nbottomKLengthBatch \n(Stream Processor)\n\n\nbottomKLengthBatch counts the frequency of different values of a specified attribute inside a batch window, and emits the lowest (k) number of frequency values. The bottom K frequency values are emitted per batch.\n\n\n\nSyntax\n\n\nbottomKLengthBatch(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT\n window.length, \nINT\n k.value)\n\n\n\n\nQuery Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe length of the window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of bottom frequencies required.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\n\nExamples\n\n\nExample 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:bottomKLengthBatch(item, 6, 3)\ninsert all events into outputStream;)\n\n\n\n\nIn the given example query, a batch of 6 events will be collected. Once the window is full, the 3 items with the lowest frequency will be emitted out and the window will be reset.\n\n\n\nkalmanMinMax \n(Stream Processor)\n\n\nThe kalmanMinMax function uses the kalman filter to smooth the time series values in the given window size, and then determine the maxima and minima of that set of values. Returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as min or max as relevant.\n\n\n\nSyntax\n\n\nkalmanMinMax(\nINT|LONG|FLOAT|DOUBLE\n attribute, \nDOUBLE\n q, \nDOUBLE\n r, \nINT\n window.size, \nSTRING\n extrema.type)\n\n\n\n\nQuery Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the minimum and/or maximum value is required.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nq\n\n        \nThe standard deviation of the process noise.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nr\n\n        \nThe standard deviation of the measurement noise.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.size\n\n        \nThe length of the window within which the minimum and/or the maximum value for the given window should be identified.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nextrema.type\n\n        \nThis can be min, max or minmax.min: If this is specified, minimum values are identified within the given window length, and they are returned with min as their extrema type. max: If this is specified, maximum values are identified within the given window length, and they are returned with max as their extrema type. minmax: If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as min for the minimum events, and as max for the maximum events.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\n\nExamples\n\n\nExample 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:kalmanMinMax(price, 0.000001,0.0001, 25, 'min')insert all events into outputStream;)\n\n\n\n\nThis query returns the minimum values for a set of price values.\n\n\n\ntopKLengthBatch \n(Stream Processor)\n\n\ntopKLengthBatch counts the frequency of different values of a specified attribute inside a batch window, and emits the highest (k) number of frequency values.\n\n\n\nSyntax\n\n\ntopKLengthBatch(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT\n window.length, \nINT\n k.value)\n\n\n\n\nQuery Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe length of the window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of top frequencies required.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\n\nExamples\n\n\nExample 1\n\n\ndefine stream inputStream (item string, price long);\n\nfrom inputStream#extrema:topKLengthBatch(item, 6, 3)\ninsert all events into outputStream;)\n\n\n\n\nIn the given example query, a batch of 6 events will be collected. Once the window is full, the 3 items with the highest frequency will be emitted out and the window will be reset.\n\n\n\ntopKTimeBatch \n(Stream Processor)\n\n\ntopKTimeBatch counts the frequency of different values of a specified attribute inside a time window, and emits the highest (k) number of frequency values.\n\n\n\nSyntax\n\n\ntopKTimeBatch(\nINT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT\n attribute, \nINT|LONG\n time.window, \nINT\n k.value)\n\n\n\n\nQuery Parameters\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute of which the frequency is counted.\n\n        \n\n        \nINT\nLONG\nFLOAT\nDOUBLE\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ntime.window\n\n        \nThe time window during which the frequency should be calculated.\n\n        \n\n        \nINT\nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nk.value\n\n        \nThe number of top frequencies required.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\n\nExamples\n\n\nExample 1\n\n\ndefine stream inputStream (item string, price long);\nfrom inputStream#extrema:topKTimeBatch(item, 1 sec,  3)\ninsert all events into outputStream;\n\n\n\n\nIn the given example query, a batch of 1 second will be collected. Once the window is full, the 3 items with the highest frequency will be emitted out and the window will be reset.", 
            "title": "4.0.1-SNAPSHOT"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#extrema", 
            "text": "", 
            "title": "Extrema"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#minbytimebatch-window", 
            "text": "Calculates the minimum value of a specified attribute within a time window, and emits it.", 
            "title": "minbytimebatch (Window)"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#syntax", 
            "text": "minbytimebatch( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  time.batch.length)", 
            "title": "Syntax"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#query-parameters", 
            "text": "Name \n         Description \n         Default Value \n         Possible Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         time.batch.length \n         The length of the time window observed. \n         \n         INT LONG \n         No \n         No", 
            "title": "Query Parameters"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#example-1", 
            "text": "define stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:minByTimeBatch(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;  In the given example query, a time-batch window of 1 second is considered. After every second, the window will be reset, emitting the event with the minimum price.", 
            "title": "Example 1"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#maxbytimebatch-window", 
            "text": "Calculates the maximum value of a specified attribute within a time window, and emits it.", 
            "title": "maxbytimebatch (Window)"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#syntax_1", 
            "text": "maxbytimebatch( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  time.batch.length)", 
            "title": "Syntax"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#query-parameters_1", 
            "text": "Name \n         Description \n         Default Value \n         Possible Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the maximum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         time.batch.length \n         The length of the time window observed. \n         \n         INT LONG \n         No \n         No", 
            "title": "Query Parameters"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#examples_1", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#example-1_1", 
            "text": "define stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByTimeBatch(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;  In the given example query, a time-batch window of 1 second is considered. After every second, the window will be reset, emitting the event with the maximum price.", 
            "title": "Example 1"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#maxbylengthbatch-window", 
            "text": "Calculates the maximum value of a specified attribute inside a batch window and emits it.", 
            "title": "maxByLengthBatch (Window)"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#syntax_2", 
            "text": "maxByLengthBatch( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT  batch.length)", 
            "title": "Syntax"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#query-parameters_2", 
            "text": "Name \n         Description \n         Default Value \n         Possible Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the maximum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         batch.length \n         The length of the batch involved. \n         \n         INT \n         No \n         No", 
            "title": "Query Parameters"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#examples_2", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#example-1_2", 
            "text": "define stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:maxByLengthBatch(price, 4) \nselect symbol,price,volume\ninsert into outputStream ;  In the given example query, a batch of 4 events will be collected. Once the window is full, the item with the maximum price in the batch will be emitted out and the window will be reset.", 
            "title": "Example 1"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#minbylengthbatch-window", 
            "text": "Calculates the minimum value of a specified attribute inside a batch window and emits it.", 
            "title": "minByLengthBatch (Window)"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#syntax_3", 
            "text": "minByLengthBatch( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT  batch.length)", 
            "title": "Syntax"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#query-parameters_3", 
            "text": "Name \n         Description \n         Default Value \n         Possible Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         batch.length \n         The length of the batch involved. \n         \n         INT \n         No \n         No", 
            "title": "Query Parameters"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#examples_3", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#example-1_3", 
            "text": "define stream cseEventStream (symbol string, price float, volume int);\n\nfrom cseEventStream#window.extrema:minByLengthBatch(price, 4) select symbol,price,volume\ninsert into outputStream ;  In the given example query, a batch of 4 events will be collected. Once the window is full, the item with the minimum price in the batch will be emitted out and the window will be reset.", 
            "title": "Example 1"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#maxbytime-window", 
            "text": "Calculates the maximum value of a specified attribute within a sliding time window and emits it. The output is updated for every event arrival and expiry during the time.window.length specified.", 
            "title": "maxbytime (Window)"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#syntax_4", 
            "text": "maxbytime( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  time.window.length)", 
            "title": "Syntax"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#query-parameters_4", 
            "text": "Name \n         Description \n         Default Value \n         Possible Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the maximum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         time.window.length \n         The length of the sliding time window observed. \n         \n         INT LONG \n         No \n         No", 
            "title": "Query Parameters"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#examples_4", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#example-1_4", 
            "text": "define stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByTime(price, 1 sec) select symbol,price,volume\ninsert into outputStream ;  In the given example query, a sliding time window of 1 second is considered. This output is updated for every event arrival and expiry of every event (after 1 second of its arrival).", 
            "title": "Example 1"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#minbytime-window", 
            "text": "Calculates the minimum value of a specified attribute within a sliding time window and emits it. The output is updated for every event arrival and expiry during the time.window.length specified.", 
            "title": "minbytime (Window)"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#syntax_5", 
            "text": "minbytime( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  time.window.length)", 
            "title": "Syntax"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#query-parameters_5", 
            "text": "Name \n         Description \n         Default Value \n         Possible Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         time.window.length \n         The length of the sliding time window observed. \n         \n         INT LONG \n         No \n         No", 
            "title": "Query Parameters"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#examples_5", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#example-1_5", 
            "text": "define stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:minByTime(price, 1 sec) select symbol,price,volume\ninsert into outputStream;  In the given example query, a sliding time window of 1 second is considered. This output is updated for every event arrival and expiry of every event (after 1 second of its arrival).", 
            "title": "Example 1"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#minbylength-window", 
            "text": "The event with the minimum value for the given attribute in the specified sliding window is emitted.", 
            "title": "minByLength (Window)"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#syntax_6", 
            "text": "minByLength( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  sliding.window.length)", 
            "title": "Syntax"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#query-parameters_6", 
            "text": "Name \n         Description \n         Default Value \n         Possible Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         sliding.window.length \n         The length of the sliding window observed. \n         \n         INT LONG \n         No \n         No", 
            "title": "Query Parameters"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#examples_6", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#example-1_6", 
            "text": "define stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:minByLength(price, 4) select symbol,price,volume\ninsert into outputStream ;  In the given example query, a sliding window of length 4 is considered. The event with the minimum price will be emitted out.", 
            "title": "Example 1"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#maxbylength-window", 
            "text": "The event with the maximum value for the given attribute in the specified sliding window is emitted.", 
            "title": "maxByLength (Window)"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#syntax_7", 
            "text": "maxByLength( INT|FLOAT|DOUBLE|LONG|STRING  attribute,  INT|LONG  sliding.window.length)", 
            "title": "Syntax"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#query-parameters_7", 
            "text": "Name \n         Description \n         Default Value \n         Possible Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the maximum value is required. \n         \n         INT FLOAT DOUBLE LONG STRING \n         No \n         No \n     \n     \n         sliding.window.length \n         The length of the sliding window observed. \n         \n         INT LONG \n         No \n         No", 
            "title": "Query Parameters"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#examples_7", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#example-1_7", 
            "text": "define stream cseEventStream (symbol string, price float, volume int);\nfrom cseEventStream#window.extrema:maxByLength(price, 4) select symbol,price,volume\ninsert into outputStream ;  In the given example query, a sliding window of length 4 is considered. The event with the maximum price will be emitted out.", 
            "title": "Example 1"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#minmax-stream-processor", 
            "text": "minMax finds the minimum and/or the maximum value within a given length window (maxPreBound+maxPostBound), where following conditions are met.  For minimum:  An event where the value for the specified attribute is greater by the percentage specified as the preBoundChange should have arrived prior to the event with the minimum value, within the maxPreBound length window. An event where the value for the specified attribute is greater by the percentage specified as the postBoundChange should have arrived after the event with the minimum value, within the maxPostBound length window. For maximum:  An event where the value for the specified attribute is less by the percentage specified as the preBoundChange should have arrived prior to the event with the maximum value, within the maxPreBound length window. An event where the value for the specified attribute is less by the percentage specified as the postBoundChange should have arrived after the event with the maximum value, within the maxPostBound length window. Returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as min or max as relevant. These events are returned with the following additional parameters. preBound: The actual distance between the minimum/maximum value and the threshold value. This value should be within the MaxPreBound window. postBound: The actual distance between the minimum/maximum value and the threshold value. This value should be within the MaxPostBound window.", 
            "title": "minMax (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#syntax_8", 
            "text": "minMax( INT|FLOAT|DOUBLE|LONG  attribute,  INT  max.pre.bound,  INT  max.post.bound,  DOUBLE  pre.bound.change,  DOUBLE  post.bound.change,  STRING  extrema.type)", 
            "title": "Syntax"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#query-parameters_8", 
            "text": "Name \n         Description \n         Default Value \n         Possible Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum and/or maximum value is required. \n         \n         INT FLOAT DOUBLE LONG \n         No \n         No \n     \n     \n         max.pre.bound \n         The maximum pre window length to be considered (before the min/max event). \n         \n         INT \n         No \n         No \n     \n     \n         max.post.bound \n         The maximum post window length to be considered (after the min/max event). \n         \n         INT \n         No \n         No \n     \n     \n         pre.bound.change \n         The threshold, pre-bound change percentage. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         post.bound.change \n         The threshold, post-bound change percentage. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         extrema.type \n         This can be min, max or minmax. min: If this is specified, minimum values are identified within the given window length, and they are returned with min as their extrema type. max: If this is specified, maximum values are identified within the given window length, and they are returned with max as their extrema type. minmax: If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as min for the minimum events, and as max for the maximum events. \n         \n         STRING \n         No \n         No", 
            "title": "Query Parameters"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#examples_8", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#example-1_8", 
            "text": "from inputStream#extrema:minMax(price, 4, 4, 1, 2, 'max')\nselect *\ninsert into outputStream;   Returns the maximum values found within a set of price values.", 
            "title": "Example 1"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#example-2", 
            "text": "from inputStream#extrema:minMax(price, 4, 4, 1, 2, 'min')\nselect *\ninsert into outputStream;   returns the minimum values found within a set of price values.", 
            "title": "Example 2"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#example-3", 
            "text": "from inputStream#extrema:minMax(price, 4, 4, 1, 2, 'minmax')\nselect *\ninsert into outputStream;   Returns both the minimum values and the maximum values found within a set of price values.", 
            "title": "Example 3"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#kernelminmax-stream-processor", 
            "text": "kernalMinMax uses Gaussian Kernel to smooth the time series values in the given window size, and then determine the maxima and minima of that set of values. Returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as min or max as relevant.", 
            "title": "kernelMinMax (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#syntax_9", 
            "text": "kernelMinMax( INT|FLOAT|DOUBLE|LONG  attribute,  DOUBLE  bandwidth,  INT  window.size,  STRING  extrema.type)", 
            "title": "Syntax"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#query-parameters_9", 
            "text": "Name \n         Description \n         Default Value \n         Possible Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum and/or maximum value is required. \n         \n         INT FLOAT DOUBLE LONG \n         No \n         No \n     \n     \n         bandwidth \n         The bandwidth of the Gaussian Kernel calculation. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         window.size \n         The length of the window within which the minimum and/or the maximum value for the given window should be identified. \n         \n         INT \n         No \n         No \n     \n     \n         extrema.type \n         This can be min, max or minmax.min: If this is specified, minimum values are identified within the given window length, and they are returned with min as their extrema type. max: If this is specified, maximum values are identified within the given window length, and they are returned with max as their extrema type. minmax: If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as min for the minimum events, and as max for the maximum events. \n         \n         STRING \n         No \n         No", 
            "title": "Query Parameters"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#examples_9", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#example-1_9", 
            "text": "define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:kernelMinMax(price, 3, 7, \u2018max\u2019)\nselect *\ninsert into outputStream;  This query returns the maximum values for a set of price values.", 
            "title": "Example 1"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#topk-stream-processor", 
            "text": "topK counts the frequency of different values of a specified attribute, and emits the highest (k) number of frequency values.", 
            "title": "topK (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#syntax_10", 
            "text": "topK( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT  k.value)", 
            "title": "Syntax"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#query-parameters_10", 
            "text": "Name \n         Description \n         Default Value \n         Possible Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         k.value \n         The number of top frequencies required. \n         \n         INT \n         No \n         No", 
            "title": "Query Parameters"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#examples_10", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#example-1_10", 
            "text": "define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:topK(item, 3)\ninsert all events into outputStream;)  In the given example query, the three items with the highest frequency counts will be emitted", 
            "title": "Example 1"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#bottomk-stream-processor", 
            "text": "bottomK counts the frequency of different values of a specified attribute, and emits the lowest (k) number of frequency values. Events are emitted only if there is a change in the bottomK results for each received chunk of events.", 
            "title": "bottomK (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#syntax_11", 
            "text": "bottomK( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT  k.value)", 
            "title": "Syntax"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#query-parameters_11", 
            "text": "Name \n         Description \n         Default Value \n         Possible Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         k.value \n         The number of bottom frequencies required. \n         \n         INT \n         No \n         No", 
            "title": "Query Parameters"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#examples_11", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#example-1_11", 
            "text": "define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:bottomK(item, 3)\ninsert all events into outputStream;)  In the given example query, the three items with the lowest frequency counts will be emitted", 
            "title": "Example 1"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#bottomktimebatch-stream-processor", 
            "text": "bottomKTimeBatch counts the frequency of different values of a specified attribute inside a time window, and emits the lowest (k) number of frequency values. Events are emitted only if there is a change in the bottomK results for each received chunk of events.", 
            "title": "bottomKTimeBatch (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#syntax_12", 
            "text": "bottomKTimeBatch( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT|LONG  time.window,  INT  k.value)", 
            "title": "Syntax"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#query-parameters_12", 
            "text": "Name \n         Description \n         Default Value \n         Possible Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         time.window \n         The time window during which the frequency should be calculated. \n         \n         INT LONG \n         No \n         No \n     \n     \n         k.value \n         The number of bottom frequencies required. \n         \n         INT \n         No \n         No", 
            "title": "Query Parameters"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#examples_12", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#example-1_12", 
            "text": "define stream inputStream (item string, price long);\nfrom inputStream#extrema:bottomKTimeBatch(item, 1 sec,  3)\ninsert all events into outputStream;)  In the given example query, a batch of 1 second will be collected. Once the window is full, the 3 items with the lowest frequency will be emitted out and the window will be reset.", 
            "title": "Example 1"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#bottomklengthbatch-stream-processor", 
            "text": "bottomKLengthBatch counts the frequency of different values of a specified attribute inside a batch window, and emits the lowest (k) number of frequency values. The bottom K frequency values are emitted per batch.", 
            "title": "bottomKLengthBatch (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#syntax_13", 
            "text": "bottomKLengthBatch( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT  window.length,  INT  k.value)", 
            "title": "Syntax"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#query-parameters_13", 
            "text": "Name \n         Description \n         Default Value \n         Possible Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         window.length \n         The length of the window. \n         \n         INT \n         No \n         No \n     \n     \n         k.value \n         The number of bottom frequencies required. \n         \n         INT \n         No \n         No", 
            "title": "Query Parameters"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#examples_13", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#example-1_13", 
            "text": "define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:bottomKLengthBatch(item, 6, 3)\ninsert all events into outputStream;)  In the given example query, a batch of 6 events will be collected. Once the window is full, the 3 items with the lowest frequency will be emitted out and the window will be reset.", 
            "title": "Example 1"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#kalmanminmax-stream-processor", 
            "text": "The kalmanMinMax function uses the kalman filter to smooth the time series values in the given window size, and then determine the maxima and minima of that set of values. Returns the events with the minimum and/or maximum for the specified attribute within the given window length, with the extrema type as min or max as relevant.", 
            "title": "kalmanMinMax (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#syntax_14", 
            "text": "kalmanMinMax( INT|LONG|FLOAT|DOUBLE  attribute,  DOUBLE  q,  DOUBLE  r,  INT  window.size,  STRING  extrema.type)", 
            "title": "Syntax"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#query-parameters_14", 
            "text": "Name \n         Description \n         Default Value \n         Possible Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the minimum and/or maximum value is required. \n         \n         INT LONG FLOAT DOUBLE \n         No \n         No \n     \n     \n         q \n         The standard deviation of the process noise. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         r \n         The standard deviation of the measurement noise. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         window.size \n         The length of the window within which the minimum and/or the maximum value for the given window should be identified. \n         \n         INT \n         No \n         No \n     \n     \n         extrema.type \n         This can be min, max or minmax.min: If this is specified, minimum values are identified within the given window length, and they are returned with min as their extrema type. max: If this is specified, maximum values are identified within the given window length, and they are returned with max as their extrema type. minmax: If this is specified, both minimum and maximum values are identified within the given window length and returned. The extrema type is specified as min for the minimum events, and as max for the maximum events. \n         \n         STRING \n         No \n         No", 
            "title": "Query Parameters"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#examples_14", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#example-1_14", 
            "text": "define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:kalmanMinMax(price, 0.000001,0.0001, 25, 'min')insert all events into outputStream;)  This query returns the minimum values for a set of price values.", 
            "title": "Example 1"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#topklengthbatch-stream-processor", 
            "text": "topKLengthBatch counts the frequency of different values of a specified attribute inside a batch window, and emits the highest (k) number of frequency values.", 
            "title": "topKLengthBatch (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#syntax_15", 
            "text": "topKLengthBatch( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT  window.length,  INT  k.value)", 
            "title": "Syntax"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#query-parameters_15", 
            "text": "Name \n         Description \n         Default Value \n         Possible Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         window.length \n         The length of the window. \n         \n         INT \n         No \n         No \n     \n     \n         k.value \n         The number of top frequencies required. \n         \n         INT \n         No \n         No", 
            "title": "Query Parameters"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#examples_15", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#example-1_15", 
            "text": "define stream inputStream (item string, price long);\n\nfrom inputStream#extrema:topKLengthBatch(item, 6, 3)\ninsert all events into outputStream;)  In the given example query, a batch of 6 events will be collected. Once the window is full, the 3 items with the highest frequency will be emitted out and the window will be reset.", 
            "title": "Example 1"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#topktimebatch-stream-processor", 
            "text": "topKTimeBatch counts the frequency of different values of a specified attribute inside a time window, and emits the highest (k) number of frequency values.", 
            "title": "topKTimeBatch (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#syntax_16", 
            "text": "topKTimeBatch( INT|LONG|FLOAT|DOUBLE|STRING|BOOL|OBJECT  attribute,  INT|LONG  time.window,  INT  k.value)", 
            "title": "Syntax"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#query-parameters_16", 
            "text": "Name \n         Description \n         Default Value \n         Possible Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute of which the frequency is counted. \n         \n         INT LONG FLOAT DOUBLE STRING BOOL OBJECT \n         No \n         No \n     \n     \n         time.window \n         The time window during which the frequency should be calculated. \n         \n         INT LONG \n         No \n         No \n     \n     \n         k.value \n         The number of top frequencies required. \n         \n         INT \n         No \n         No", 
            "title": "Query Parameters"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#examples_16", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/api/4.0.1-SNAPSHOT/#example-1_16", 
            "text": "define stream inputStream (item string, price long);\nfrom inputStream#extrema:topKTimeBatch(item, 1 sec,  3)\ninsert all events into outputStream;  In the given example query, a batch of 1 second will be collected. Once the window is full, the 3 items with the highest frequency will be emitted out and the window will be reset.", 
            "title": "Example 1"
        }
    ]
}